#include "stdafx.h"

#include "CommandLineProcessor.h"
#include "MD5.h"
#include "Utilities.h"

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>

#ifndef FIRST_BUILD
#include "sql2h_manifest.h"
#include "sql2h_manifest.uuid.h"
#else
#define SQL2H_MANIFEST_DATE "01/01/1970 00:00:00"
#define SQL2H_MANIFEST_VERSION "0000000000"
#endif

class CommandLineParser
{
public:
	CommandLineParser()
			: Prefix( "SQL" )
			, InFile( "" )
			, Number( false )
			, Md5( false )
			, Help( false )
	{
		parser.RegisterConsumer( *this );
		parser.RegisterCallback( "infile", &CommandLineParser::setInfile );
		parser.RegisterCallback( "prefix", &CommandLineParser::setPrefix );
		parser.RegisterCallback( "number", &CommandLineParser::setNumber );
		parser.RegisterCallback( "md5", &CommandLineParser::setMd5 );
		parser.RegisterCallback( "help", &CommandLineParser::setHelp );
		parser.RegisterCallback( "h", &CommandLineParser::setHelp );
		parser.RegisterCallback( "?", &CommandLineParser::setHelp );
	}

	void setInfile( const std::string& argument )
	{
		InFile = argument;
	}

	void setPrefix( const std::string& argument )
	{
		Prefix = argument;
	}

	void setNumber( const std::string& argument = "" )
	{
		Number = true;
	}

	void setMd5( const std::string& argument = "" )
	{
		Md5 = true;
	}

	void setHelp( const std::string& argument = "" )
	{
		Help = true;
	}

	std::string Prefix;
	std::string InFile;
	bool Number;
	bool Md5;
	bool Help;
	RPW::Core::CommandLineProcessor<CommandLineParser> parser;
};

int main(int argc, char* argv[])
{
    std::string self(argv[0]);
    std::string app(self.substr(self.find_last_of("/\\")+1));

	std::cout << "/// @version " << app << " [" << SQL2H_MANIFEST_VERSION << "] " << SQL2H_MANIFEST_DATE << std::endl;

	try
	{
		CommandLineParser clp;
		clp.parser.Process( argc, argv, 1 );

		if ( clp.Help )
		{
			std::cout << "// usage: " << app << " -infile filepath [-prefix defineprefix] [-number] [-md5]" << std::endl;
			return 0;
		}

		if ( clp.InFile.length() == 0 )
		{
			std::cout << "#error no infile defined" << std::endl;
			return 1;
		}

		std::cout << "/// @note generated by " << app
			<< " -infile \"" << clp.InFile << "\" -prefix \"" << clp.Prefix << '"';
		if ( clp.Number ) std::cout << " -number";
		std::cout << std::endl;
		std::cout << std::endl;

		std::ifstream infile(clp.InFile.c_str());
		std::string line;

		if (!infile)
		{
			std::cout << "#error " << app << " :: unable to open file \"" << clp.InFile << "\"" << std::endl;
			return 2;
		}

		std::cout << "#pragma once" << std::endl << std::endl;

		unsigned long lineNumber = 0;
		while (!infile.eof())
		{
			getline(infile, line);

			std::string::size_type pos = line.find_first_of( " " );
			if ( std::string::npos != pos )
			{
				std::string firstWord = line.substr( 0, pos );
				pos = line.find_first_not_of( " ", pos );
				line.erase( 0, pos );

				if (line.length() > 0)
				{
					bool comment = firstWord == "--";
					
					if ( !comment )
					{
						std::cout << "#define " << clp.Prefix;
					
						bool md5onthefly = firstWord == "md5";
						if ( !md5onthefly )
						{
							std::cout << "_" << firstWord;
						}

						++lineNumber;
						if ( clp.Number )
						{
							std::cout << "_" << lineNumber;
						}

						if ( clp.Md5 || md5onthefly )
						{
							RPW::Core::MD5 md5;
							std::cout << "_" << md5.getHashFromString( line );
						}

						std::ostringstream oss;
						std::vector<std::string> v = RPW::Core::Utilities::TokenizeStr( line, "\"" );
						for (std::vector<std::string>::iterator it = v.begin(); it != v.end(); ++it )
						{
							if ( it != v.begin() ) oss << "\\\"";
							oss << *it;
						}
						// due to a nuance in TokenizeStr, a line that ends with a quote needs tweaking here
						if ( line[line.length() - 1] == '"' ) oss << "\\\"";

						std::cout << ' ' << '"' << oss.str() << '"' << std::endl;
					}
				}
			}
		}
		infile.close();
	}
	catch ( const std::exception& e )
	{
		std::cout << "#error " << e.what() << std::endl;
		return 3;
	}
	catch ( ... )
	{
		std::cout << "#error unknown system exception" << std::endl;
		return 4;
	}
 
	return 0;
}
